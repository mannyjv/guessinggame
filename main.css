/* Write your CSS code in this file */

.container {
  width: 100%;
  max-width: 840px;
  background-color: rgb(80, 95, 136);
  height: 480px;
  padding: 0px 50px 3px 50px;
  margin: 0 auto; /*Specifying auto as the second parameter basically tells the browser to automatically determine the left and right margins itself, which it does by setting them equally. It guarantees that the left and right margins will be set to the same size. The first parameter 0 indicates that the top and bottom margins will both be set to 0. margin-top: 0; margin-bottom: 0; margin-left: auto; margin-right: auto; Therefore, to give you an example, if the parent is 100px and the child is 50px, then the auto property will determine that there's 50px of free space to share between margin-left and margin-right: var freeSpace = 100 - 50; var equalShare = freeSpace / 2; Which would give: margin-left: 25; margin-right: 25;*/
  font-size: 20px;
  color: white;
  border-radius: 20%;
}

.center {
  text-align: center;
}

#headers {
  font-family: "Franklin Gothic Medium", "Arial Narrow", Arial, sans-serif;
}

#input-parent {
  width: 160px;
  margin: 35px auto 50px;
  position: relative;
}

#playerInput {
  opacity: 0.7;
  color: #4c5b56;
  border: 2px solid white;
  border-radius: 50%;
  width: 120px;
  height: 120px;
  font-size: 15px;
}

#submit {
  border-radius: 50%;
  width: 60px;
  height: 60px;
  position: absolute; /*The position CSS property sets how an element is positioned in a document. The top, right, bottom, and left properties (below) determine the final location of positioned elements.*/
  top: 80px;
  left: 105px;
}
.button {
  /* background-color: white; */
  color: #fff;
  background-color: #17a2b8;
  border-color: #17a2b8;
  border: 2px solid transparent;
  border-radius: 10%;
  display: inline-block; /*“display: inline-block” Property: This property is used to display an element as an inline-level block container. The element itself is formatted as an inline element, but it can apply height and width values. It is placed as an inline element (on the same line as adjacent content). It looks like an inline element but it behaves as a block element and don’t force to line break.*/
  font-weight: 600;
  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out,
    box-shadow 0.15s ease-in-out;
}

.button, /*selecting a class and an id separated by comma, to add shadow*/
#playerInput, .guess {
  /* offset-x | offset-y | blur-radius | spread-radius | color */
  box-shadow: 0px 7px 10px -4px rgb(0 0 0 / 62%);
}

ul {
  list-style: none; /*removes numbers or bullet points from list*/
}
.guess {
  display: inline; /*causes all elements to because inline elements, sit next to eachother on same line */
  border: 2px solid white;
  border-radius: 10%;
  padding: 5px 15px; /*adds space between content and its border, the border of each guess, goes top, right, bottom, left but if left is ommited its the same as right, if bottom is ommitted its the same as top */
  margin: 0 10px; /*adds space between each guess box object, 0 margin on top and bottom but 10px between guess boxes on left and right */
}

#menu-btns-cont {
  margin-top: 30px;
}

.menu-btns {
  margin: 0 8px;
  padding: 5px 20px;
}
